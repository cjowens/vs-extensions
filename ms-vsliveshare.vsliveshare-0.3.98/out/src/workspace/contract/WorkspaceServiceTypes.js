"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.4.8.0 (http://NJsonSchema.org)
// </auto-generated>
//----------------------
Object.defineProperty(exports, "__esModule", { value: true });
var WorkspaceConnectionStatus;
(function (WorkspaceConnectionStatus) {
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unknown"] = 'unknown'] = "Unknown";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Available"] = 'available'] = "Available";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unavailable"] = 'unavailable'] = "Unavailable";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Connected"] = 'connected'] = "Connected";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Disconnected"] = 'disconnected'] = "Disconnected";
})(WorkspaceConnectionStatus = exports.WorkspaceConnectionStatus || (exports.WorkspaceConnectionStatus = {}));
var ConnectionMode;
(function (ConnectionMode) {
    ConnectionMode[ConnectionMode["Auto"] = 'auto'] = "Auto";
    ConnectionMode[ConnectionMode["Direct"] = 'direct'] = "Direct";
    ConnectionMode[ConnectionMode["Relay"] = 'relay'] = "Relay";
    ConnectionMode[ConnectionMode["Local"] = 'local'] = "Local";
})(ConnectionMode = exports.ConnectionMode || (exports.ConnectionMode = {}));
var WorkspaceDisconnectedReason;
(function (WorkspaceDisconnectedReason) {
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["None"] = 'none'] = "None";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["Requested"] = 'requested'] = "Requested";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["UserRemoved"] = 'userRemoved'] = "UserRemoved";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionEnded"] = 'sessionEnded'] = "SessionEnded";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["ConnectionLost"] = 'connectionLost'] = "ConnectionLost";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["InternalError"] = 'internalError'] = "InternalError";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionExpired"] = 'sessionExpired'] = "SessionExpired";
})(WorkspaceDisconnectedReason = exports.WorkspaceDisconnectedReason || (exports.WorkspaceDisconnectedReason = {}));
var WorkspaceSessionChangeType;
(function (WorkspaceSessionChangeType) {
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["None"] = 'none'] = "None";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Joined"] = 'joined'] = "Joined";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Unjoined"] = 'unjoined'] = "Unjoined";
})(WorkspaceSessionChangeType = exports.WorkspaceSessionChangeType || (exports.WorkspaceSessionChangeType = {}));
var WorkspaceProgress;
(function (WorkspaceProgress) {
    WorkspaceProgress[WorkspaceProgress["None"] = 'none'] = "None";
    WorkspaceProgress[WorkspaceProgress["CreatedWorkspace"] = 'createdWorkspace'] = "CreatedWorkspace";
    WorkspaceProgress[WorkspaceProgress["InitializedAgentServices"] = 'initializedAgentServices'] = "InitializedAgentServices";
    WorkspaceProgress[WorkspaceProgress["InitializedRelayAndTCP"] = 'initializedRelayAndTCP'] = "InitializedRelayAndTCP";
    WorkspaceProgress[WorkspaceProgress["AddedUserToWorkspace"] = 'addedUserToWorkspace'] = "AddedUserToWorkspace";
    WorkspaceProgress[WorkspaceProgress["JoinedLocalWorkspace"] = 'joinedLocalWorkspace'] = "JoinedLocalWorkspace";
    WorkspaceProgress[WorkspaceProgress["ReadWorkspaceInfo"] = 'readWorkspaceInfo'] = "ReadWorkspaceInfo";
    WorkspaceProgress[WorkspaceProgress["OpeningRemoteSession"] = 'openingRemoteSession'] = "OpeningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["OpenedRemoteSession"] = 'openedRemoteSession'] = "OpenedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoiningRemoteSession"] = 'joiningRemoteSession'] = "JoiningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoinedRemoteSession"] = 'joinedRemoteSession'] = "JoinedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["WaitingForHost"] = 'waitingForHost'] = "WaitingForHost";
    WorkspaceProgress[WorkspaceProgress["DoneWaitingForHost"] = 'doneWaitingForHost'] = "DoneWaitingForHost";
})(WorkspaceProgress = exports.WorkspaceProgress || (exports.WorkspaceProgress = {}));
var WorkspaceServicesChangeType;
(function (WorkspaceServicesChangeType) {
    WorkspaceServicesChangeType[WorkspaceServicesChangeType["None"] = 'none'] = "None";
    WorkspaceServicesChangeType[WorkspaceServicesChangeType["Add"] = 'add'] = "Add";
    WorkspaceServicesChangeType[WorkspaceServicesChangeType["Remove"] = 'remove'] = "Remove";
})(WorkspaceServicesChangeType = exports.WorkspaceServicesChangeType || (exports.WorkspaceServicesChangeType = {}));

//# sourceMappingURL=WorkspaceServiceTypes.js.map
